# python/calculator.py
import sys
import os
import yaml

sys.path.insert(0, 'build')
from finite_field_module import FiniteField, FiniteFieldRules  # type: ignore


class Calculator:
    def __init__(self, variant_name: str):
        print(f"\n{'='*50}")
        print(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞: {variant_name}")
        print(f"{'='*50}\n")
        
        try:
            self.rules = FiniteFieldRules("config/core.yaml", variant_name)
            self.engine = FiniteField(self.rules)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª–µ
            self.size = self.rules.getSize()
            self.zero = self.rules.getZeroElement()
            self.one = self.rules.getOneElement()
            
            print(f" --- –†–∞–∑–º–µ—Ä –ø–æ–ª—è: Z{self.size}")
            print(f" --- –ù—É–ª–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç: {self.zero}")
            print(f" --- –ï–¥–∏–Ω–∏—á–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç: {self.one}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã
            self.symbols = []
            for i in range(self.size):
                sym = self.rules.getValueChar(i)
                self.symbols.append(sym)
            
            print(f"‚úì –°–∏–º–≤–æ–ª—ã –ø–æ–ª—è: {self.symbols}")
            print(f"\n{'='*50}\n")
            
        except Exception as e:
            print(f"‚úó –û–®–ò–ë–ö–ê –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            sys.exit(1)
    
    def calculate(self, op1: str, operator: str, op2: str) -> str:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∏–º–≤–æ–ª—ã –≤–∞–ª–∏–¥–Ω—ã
            if op1 not in self.symbols:
                return f"–û—à–∏–±–∫–∞: —Å–∏–º–≤–æ–ª '{op1}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø–æ–ª–µ. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {self.symbols}"
            if op2 not in self.symbols:
                return f"–û—à–∏–±–∫–∞: —Å–∏–º–≤–æ–ª '{op2}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø–æ–ª–µ. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {self.symbols}"
            
            if operator == '+':
                result = self.engine.add(op1, op2)
            elif operator == '-':
                result = self.engine.subtract(op1, op2)
            elif operator == '*':
                result = self.engine.multiply(op1, op2)
            elif operator == '/':
                result = self.engine.divide(op1, op2)
            else:
                return f"–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä '{operator}'. –î–æ—Å—Ç—É–ø–Ω—ã–µ: +, -, *, /"
            
            return result
            
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: {e}"
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º."""
        print("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω!")
        print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: {' '.join(self.symbols)}")
        print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: +  -  *  /")
        print(f"\n–í–≤–æ–¥–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: a + b")
        print(f"–î–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ: exit –∏–ª–∏ quit\n")
        
        while True:
            try:
                expression = input(">>> ").strip()
                
                if expression.lower() in ['exit', 'quit', 'q']:
                    print("\n–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã\n")
                    break
                
                if not expression:
                    continue
                
                # –ü–∞—Ä—Å–∏–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
                parts = expression.split()
                
                if len(parts) == 1:
                    # –ü—Ä–æ—Å—Ç–æ —Å–∏–º–≤–æ–ª - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –∏–Ω–¥–µ–∫—Å
                    if parts[0] in self.symbols:
                        idx = self.rules.getCharValue(parts[0])
                        print(f"  ‚Üí '{parts[0]}' –∏–º–µ–µ—Ç –∏–Ω–¥–µ–∫—Å {idx}")
                    else:
                        print(f"  ‚Üí –°–∏–º–≤–æ–ª '{parts[0]}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–æ–ª–µ")
                    continue
                
                if len(parts) != 3:
                    print(f"  ‚Üí –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: —Å–∏–º–≤–æ–ª –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∏–º–≤–æ–ª")
                    print(f"     –ù–∞–ø—Ä–∏–º–µ—Ä: a + b")
                    continue
                
                op1, operator, op2 = parts
                
                # –í—ã—á–∏—Å–ª—è–µ–º
                result = self.calculate(op1, operator, op2)
                
                # –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥
                if not result.startswith("–û—à–∏–±–∫–∞"):
                    print(f"  ‚Üí {op1} {operator} {op2} = {result}")
                else:
                    print(f"  ‚Üí {result}")
                    
            except KeyboardInterrupt:
                print("\n\n–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã\n")
                break
            except Exception as e:
                print(f"  ‚Üí –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                    
def load_variants():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."""
    try:
        with open("config/core.yaml", "r", encoding="utf-8") as f:
            config = yaml.safe_load(f)
            variants = []
            for field_type, field_variants in config.get("variants", {}).items():
                for variant_name, variant_data in field_variants.items():
                    size = variant_data.get("size", "?")
                    symbols = variant_data.get("rule_plus_one", [])
                    variants.append({
                        'name': variant_name,
                        'type': field_type,
                        'size': size,
                        'symbols': symbols
                    })
            return variants
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {e}")
        return []

